# -*- coding: utf-8 -*-
"""Decision Tree classifier

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VQmevO9JtkC1boQPHNJQAzoT4Mn_Rgye
"""

import pandas as pd
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import classification_report, accuracy_score, confusion_matrix
import warnings
warnings.filterwarnings('ignore')
from sklearn import tree
from sklearn.model_selection import GridSearchCV

drug_data = pd.read_csv('/content/drug200.csv')
drug_data

drug_data.columns

print(drug_data['Sex'].unique())
print(drug_data['BP'].unique())
print(drug_data['Cholesterol'].unique())

print(drug_data['Sex'].value_counts())
print()
print(drug_data['BP'].value_counts())
print()
print(drug_data['Cholesterol'].value_counts())
print()
print(drug_data['Drug'].value_counts())

ln = LabelEncoder()
ln

drug_data['Sex'] = ln.fit_transform(drug_data['Sex'])
drug_data['BP'] = ln.fit_transform(drug_data['BP'])
drug_data['Cholesterol'] = ln.fit_transform(drug_data['Cholesterol'])
drug_data['Drug'] = ln.fit_transform(drug_data['Drug'])

drug_data

"""Sex
M    104
F     96
Name: count, dtype: int64

BP
HIGH      77
LOW       64
NORMAL    59
Name: count, dtype: int64

Cholesterol
HIGH      103
NORMAL     97
Name: count, dtype: int64
"""

print(drug_data['Sex'].value_counts())
print()
print(drug_data['BP'].value_counts())
print()
print(drug_data['Cholesterol'].value_counts())
print()
print(drug_data['Drug'].value_counts())

drug_data.info()

drug_data['Age'].describe().to_frame()

x = drug_data.drop(['BP'], axis=True)
y = drug_data['BP']

x_train, x_test, y_train, y_test = train_test_split(x, y, random_state=20, test_size=0.75)

x_train

print(drug_data.shape)
print(x_train.shape)
print(x_test.shape)

plt.figure(figsize=(6, 4))
sns.heatmap(drug_data.corr(), annot=True)
plt.xticks(rotation=45)
plt.show()

model = DecisionTreeClassifier(criterion= 'gini', max_depth= 3, max_leaf_nodes= 4)
model.fit(x_train, y_train)

y_pred = model.predict(x_test)

x_train.describe()

model.predict([[40, 1, 0, 16, 1]])

print(classification_report(y_pred, y_test))

plt.figure(figsize=(6, 4))
sns.heatmap(confusion_matrix(y_pred, y_test), annot=True, )
plt.show()

plt.figure(figsize=(12, 10))
tree.plot_tree(model, class_names=['0', '1', '2'],
               feature_names=['Age', 'Sex', 'Cholesterol', 'Na_to_K', 'Drug'])
plt.show()

x_train.columns

tree_params = {'criterion':['gini', 'entropy'],
               'max_depth': list(range(1, 7)),
               'max_leaf_nodes': list(range(1, 7))}
search = GridSearchCV(model, tree_params, cv=5)
search.fit(x_train, y_train)

print(search.best_estimator_)
search.best_params_

search.best_score_

